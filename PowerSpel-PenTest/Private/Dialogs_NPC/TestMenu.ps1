#While renaming to use for specific dialogs, don't forget to rename the call to itself on line ~59
function TestMenu {
    param(
        #Create a marker to show this is the main menu (otherwise the added sub menu will recursively be added in every sub menu)
        $MainMenu = $true,
        #Create the entire menu from nested hashtables
        [hashtable]$menu = @{
            "1" = @{
                MenuMessage = "Menuoptie 1"
                Commands = {Write-Host "Stop hier je scriptblock, indien van toepassing."}
                Submenus = @{
                    1.1 = @{
                        MenuMessage = "Menuoptie 1.1"
                        Commands = {Write-Host "Stop hier je scriptblock, indien van toepassing."}
                        Submenus = @{
                        } #End Submenus 1.1
                    } #End 1.1
                    1.2 = @{
                        MenuMessage = "Menuoptie 1.1"
                        Commands = {Write-Host "Stop hier je scriptblock, indien van toepassing."}
                        Submenus = @{
                        } #End Submenus 1.2
                    } #End 1.2
                } #End submenus 1
            } #End 1
            "2" = @{
                MenuMessage = "Menuoptie 2"
                Commands = {Write-Host "Stop hier je scriptblock, indien van toepassing."}
                Submenus = @()
            } #End 2
        } #End menu
    ) #End param

        
    #-------------------------
    #region Menu logic
    #-------------------------
    
    $ValidChoice = $false
    #Loop through the following until $ValidChoice is false
    while(-not $validChoice){
        #Build default screen components
        Clear-Host
        Write-Host ""
        Write-Host $ActionMessage -ForegroundColor Green #Write the latest action to screen
        Write-Host ""

        #Fill variable with the entire first level of the menu hashtable.
        $keuzekeys = @($menu.Keys)
        $i = 1

        #Loop through all themenu options and write them to screen in a numbered list.
        foreach($key in $keuzekeys){
            Write-Host "${i}: $key"
            $i++
        }
        
        #Ask user for input (a number from the list)
        Write-Host ""
        $keuze = read-host "Selecteer optienummer"

        #Check the following and if it doesn't match, to go catch
        try{
            #Set selected item to the number imputted minus one (because a hashtable starts at 0)
            $keuzekey = $keuzekeys[$keuze-1]
            
            #Select item from menu, corresponding to the user input
            $GekozenActie = $menu.$keuzekey
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a hashtable and inputs that as new options for the next menu level
            if($GekozenActie -is [hashtable]){
                TestMenu -menu $gekozenactie -MainMenu $false
            }
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a scriptblock and executes it.
            if($gekozenactie -is [scriptblock]){
                Invoke-Command -ScriptBlock $gekozenactie -NoNewScope
            }
        
            $ValidChoice = $true
        
        }catch{
         #If the option selected is neither leading to the next menu, nor a scriptblock, write error and go back in the try loop
         Write-Host 'Ongeldig commando, probeer het nog eens.'
         Start-Sleep -Seconds 1
        }
    } #End while loop
#endregion

} #End Invoke-OGDNPCDialog-Baliedame1