#While renaming to use for specific dialogs, don't forget to rename the call to itself on line ~59
function Invoke-OGDDialog-ServerdeurDicht {
    param(
        #Create a marker to show this is the main menu (otherwise the added sub menu will recursively be added in every sub menu)
        $MainMenu = $true,
        #Create the entire menu from nested hashtables
        [hashtable]$menu = @{
            "Pak de slijptol die je in een kast ziet liggen en slijp het slot van de deur los." = {
                Write-Host "Je maakt flink herrie en nog voordat je het slot open hebt geslepen, staat er een OGD'er naast je die vraagt wat je in vredesnaam aan het doen bent." -ForegroundColor Green
                Start-Sleep -Seconds 5
                $State.self.ending = 4
                $state.location = @(99,99,99)
                Break
            } #End slijptol
            "Probeer de deur open te breken met je schouder en een aanloopje." = {
                If ($State.counter.schouderbeuken-eq 0) {
                    $global:ActionMessage = "Ondanks al die uren sportschool, blijk je niet sterk en stevig genoeg om de deur op deze manier te forceren. Je schouder doet nu wel pijn, het lijkt je niet handig om dit nog eens te proberen."
                } #End zereschouder 0
                If ($State.counter.schouderbeuken -eq 1) {
                    $global:ActionMessage = "Ook een tweede poging tot inbeuken mislukt en je schouder doet nu wel erg veel zeer."
                } #End zereschouder 1
                If ($State.counter.schouderbeuken -eq 2) {
                    Write-Host "Tegen alle signalen van je lichaam in, ren je nog een derde keer tegen de deur op. Je voelt iets kraken en zakt in elkaar van de pijn." -ForegroundColor Green
                    Start-Sleep -Seconds 3
                    $State.self.ending = 5
                    $state.location = @(99,99,99)
                } #End zereschouder 2
                $State.counter.schouderbeuken ++
                Break
            } #End schouder
        } #End menu
    ) #End param

#Faulty but working code
    if (($state.self.inventory -contains "een gereedschapskist vol gereedschap") -and ($MainMenu -eq $true)) {
        $menu.add("Pak de grootste schroevendraaier uit de gereedschapskist en probeer de deur open te wrikken.",
            @{
                "Pak een waterpomptang en gebruik die om de schroevendraaier met meer kracht te wrikken." = {
                    $global:ActionMessage = "Met de waterpomptang heb je meer kracht, maar de schroevendraaier komt nog niet diep genoeg om die kracht te gebruiken. Je zult iets anders moeten proberen."
                    Break
                } #End waterpomptang
                "Pak een tweede schroevendraaier en wissel wrikken af met de eerste." = {
                    $global:ActionMessage = "Goed idee, die tweede schroevendraaier. Je krijgt ze er alleen met de hand niet diep genoeg tussen om te kunnen forceren."
                    Break
                } #End tweede schroevendraaier
                "Sla met een hamer op de schroevendraaier om hem dieper tussen de deur en deurpost te krijgen." = {
                    $global:ActionMessage = "Je slaat de schroevendraaier diep tussen de deur en de deurpost. Je zet goed kracht en breekt de deur open! Achter de deur zie je een ruimte met 19 inch racks. Je besluit dat je lang genoeg met de zware gereedschapskist hebt rondgelopen en laat hem hier achter."
                    $state.room.'040600'.'serverdeuropen' = $true
                    #Add penetration
                    If ($State.self.Penetrations -notcontains "toegang verkregen tot serverruimte") { #Only do this if $State.self.Penetrations does not contain the accomplishment you try to add
                        $State.self.Penetrations = $State.self.Penetrations += "toegang verkregen tot serverruimte" #Add the current penetration option to the list of successfull penetrations
                        $state.self.PenetrationsAmount = $($state.self.PenetrationsAmount) + 1 #Add 1 to PenetrationsAmount
                        $state.self.PenetrationScore = $($state.self.PenetrationScore) + 500 #Add the score of this penetration to the PenetrationScore
                    }
                    [array]$state.self.inventory = $state.self.inventory | Where-Object {$_ -ne 'een gereedschapskist vol gereedschap'}
                    Break
                } #End hamer
            } #End hashtable inside "pak de grootste schroevendraaier"
        ) #End schroevendraaier
    } #Endif gereedschapskist
#>
        
    #-------------------------
    #region Menu logic
    #-------------------------
    $ValidChoice = $false
    #Loop through the following until $ValidChoice is false
    while(-not $validChoice){
        #Build default screen components
        Clear-Host
        Show-Header
        Write-Host ""
        Write-Host $ActionMessage -ForegroundColor Green #Write the latest action to screen
        Write-Host ""

        #Fill variable with the entire first level of the menu hashtable.
        $keuzekeys = @($menu.Keys)
        $i = 1

        #Loop through all themenu options and write them to screen in a numbered list.
        foreach($key in $keuzekeys){
            Write-Host "${i}: $key"
            $i++
        }
        
        #Ask user for input (a number from the list)
        Write-Host ""
        $keuze = read-host "Selecteer optienummer"

        #Check the following and if it doesn't match, to go catch
        try{
            #Set selected item to the number imputted minus one (because a hashtable starts at 0)
            $keuzekey = $keuzekeys[$keuze-1]
            
            #Select item from menu, corresponding to the user input
            $GekozenActie = $menu.$keuzekey
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a hashtable and inputs that as new options for the next menu level
            if($GekozenActie -is [hashtable]){
                Invoke-OGDDialog-ServerdeurDicht -menu $gekozenactie -MainMenu $false
            }
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a scriptblock and executes it.
            if($gekozenactie -is [scriptblock]){
                Invoke-Command -ScriptBlock $gekozenactie -NoNewScope
            }
        
            $ValidChoice = $true
        
        }catch{
         #If the option selected is neither leading to the next menu, nor a scriptblock, write error and go back in the try loop
         Write-Host 'Ongeldig commando, probeer het nog eens.'
         Start-Sleep -Seconds 1
        }
    } #End while loop
#endregion

} #End Invoke-OGDDialog-General