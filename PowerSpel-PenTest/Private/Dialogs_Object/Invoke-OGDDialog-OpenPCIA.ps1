#While renaming to use for specific dialogs, don't forget to rename the call to itself on line ~59
function Invoke-OGDDialog-OpenPCIA {
    param(
        #Create the entire menu from nested hashtables
        [hashtable]$menu = @{
            "Ga aan het bureau zitten en sla je slag op een onbemande beheer-PC" = {
                Write-Host "Iemand roept 'Wat doe je daar bij mijn PC?' Iedereen kijkt naar jou en voel je je erg betrapt." -ForegroundColor Green
                Start-Sleep -Seconds 3
                $State.self.ending = 4
                $state.location = @(99,99,99)
                Break
            } #End ga zitten 
            "Blijf naast het bureau staan en staar wat naar je telefoon, terwijl je de drie beeldschermen bekijkt." = @{
                "Bekijk het linker beeldscherm met een Word-document" = {
                    $State.counter.Beelschermspieken ++
                    $global:ActionMessage = "Het Word-document is een ontwerp van de interne omgeving. Je maakt snel en onopvallend een foto van deze gevoelige informatie."
                    If ($State.self.Penetrations -notcontains "gevoelige technische informatie ingezien") { #Only do this if $State.self.Penetrations does not contain the accomplishment you try to add
                        $State.self.Penetrations = $State.self.Penetrations += "gevoelige technische informatie ingezien" #Add the current penetration option to the list of successfull penetrations
                        $state.self.PenetrationsAmount = $($state.self.PenetrationsAmount) + 1 #Add 1 to PenetrationsAmount
                        $state.self.PenetrationScore = $($state.self.PenetrationScore) + 200 #Add the score of this penetration to the PenetrationScore
                    }
                    If ($State.counter.Beelschermspieken -eq 2) {
                        $global:ActionMessage += " Je hebt het idee dat als je hier nog lang staat, het op gaat vallen."
                    } ElseIf ($State.counter.Beelschermspieken -ge 3) {
                        Write-Host "Iemand roept 'Wat doe je daar bij mijn PC?' Iedereen kijkt naar jou en voel je je erg betrapt." -ForegroundColor Green
                        Start-Sleep -Seconds 3
                        $State.self.ending = 4
                        $state.location = @(99,99,99)
                        Break
                    }
                    Break
                } #End links
                "Bekijk het middelste beeldscherm met diverse consoles" = {
                    $State.counter.Beelschermspieken ++
                    $global:ActionMessage = "Er staan diverse consoles open op dit beeldscherm en je snapt er weinig van. Wat je wel meekrijgt (door alle rode kruizen en uitroeptekens), is dat er iets mis gaat."
                    If ($State.counter.Beelschermspieken -eq 2) {
                        $global:ActionMessage += " Je hebt het idee dat als je hier nog lang staat, het op gaat vallen."
                    } ElseIf ($State.counter.Beelschermspieken -ge 3) {
                        Write-Host "Iemand roept 'Wat doe je daar bij mijn PC?' Iedereen kijkt naar jou en voel je je erg betrapt." -ForegroundColor Green
                        Start-Sleep -Seconds 3
                        $State.self.ending = 4
                        $state.location = @(99,99,99)
                        Break
                    }
                    Break
                } #End midden
                "Bekijk het rechter beeldscherm met grafieken en tabellen" = {
                    $State.counter.Beelschermspieken ++
                    $global:ActionMessage = "Dit beeldscherm bevat de monitoring van onder andere de internetverbinding. De grafiek laat zien: 'No connection available'."
                    If ($State.counter.Beelschermspieken -eq 2) {
                        $global:ActionMessage += " Je hebt het idee dat als je hier nog lang staat, het op gaat vallen."
                    } ElseIf ($State.counter.Beelschermspieken -ge 3) {
                        Write-Host "Iemand roept 'Wat doe je daar bij mijn PC?' Iedereen kijkt naar jou en voel je je erg betrapt." -ForegroundColor Green
                        Start-Sleep -Seconds 3
                        $State.self.ending = 4
                        $state.location = @(99,99,99)
                        Break
                    }
                    Break
                } #End rechts
                "Loop weg van de werkplek" = {
                    $global:ActionMessage = "Je loopt weg van de werkplek, maar bent wel nog steeds nieuwsgierig wat er te halen valt."
                    Break
                } #End rechts
            } #End blijf staan
        } #End menu
    ) #End param
        
    #-------------------------
    #region Menu logic
    #-------------------------
    $ValidChoice = $false
    #Loop through the following until $ValidChoice is false
    while(-not $validChoice){
        #Build default screen components
        Clear-Host
        Show-Header
        Write-Host ""
        Write-Host $ActionMessage -ForegroundColor Green #Write the latest action to screen
        Write-Host ""

        #Fill variable with the entire first level of the menu hashtable.
        $keuzekeys = @($menu.Keys)
        $i = 1

        #Loop through all themenu options and write them to screen in a numbered list.
        foreach($key in $keuzekeys){
            Write-Host "${i}: $key"
            $i++
        }
        
        #Ask user for input (a number from the list)
        Write-Host ""
        $keuze = read-host "Selecteer optienummer"

        #Check the following and if it doesn't match, to go catch
        try{
            #Set selected item to the number imputted minus one (because a hashtable starts at 0)
            $keuzekey = $keuzekeys[$keuze-1]
            
            #Select item from menu, corresponding to the user input
            $GekozenActie = $menu.$keuzekey
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a hashtable and inputs that as new options for the next menu level
            if($GekozenActie -is [hashtable]){
                Invoke-OGDDialog-OpenPCIA -menu $gekozenactie
            }
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a scriptblock and executes it.
            if($gekozenactie -is [scriptblock]){
                Invoke-Command -ScriptBlock $gekozenactie -NoNewScope
            }
        
            $ValidChoice = $true
        
        }catch{
         #If the option selected is neither leading to the next menu, nor a scriptblock, write error and go back in the try loop
         Write-Host 'Ongeldig commando, probeer het nog eens.'
         Start-Sleep -Seconds 1
        }
    } #End while loop
#endregion

} #End Invoke-OGDDialog-General