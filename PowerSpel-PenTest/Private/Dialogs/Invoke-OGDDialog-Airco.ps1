#While renaming to use for specific dialogs, don't forget to rename the call to itself on line ~59
function Invoke-OGDDialog-Airco {
    param(
        #Create a marker to show this is the main menu (otherwise the added sub menu will recursively be added in every sub menu)
        $MainMenu = $true,
        #Create the entire menu from nested hashtables
        [hashtable]$menu = @{
            "Stop een rookpatroon in de airo, om een vergiftiging te simuleren." = {
                if ($state.room.'060704'.'aircoaan' -eq $true) {    
                    Write-Host "Je pakt een rookpatroon uit je rugzak, ontsteekt hem en plaatst hem in een van de pijpen met een klepje." -ForegroundColor Green
                    If ($State.self.Penetrations -notcontains "medewerkers 'vergiftigd' met gas") { #Only do this if $State.self.Penetrations does not contain the accomplishment you try to add
                        $State.self.Penetrations = $State.self.Penetrations += "medewerkers 'vergiftigd' met gas" #Add the current penetration option to the list of successfull penetrations
                        $state.self.PenetrationsAmount = $($state.self.PenetrationsAmount) + 1 #Add 1 to PenetrationsAmount
                        $state.self.PenetrationScore = $($state.self.PenetrationScore) + 200 #Add the score of this penetration to the PenetrationScore
                    }
                    Start-Sleep -Seconds 5
                    $State.self.ending = 3
                    $state.location = @(99,99,99)
                    Break
                } else {
                    $Global:ActionMessage = "Je zet een rookpatroon in de luchtpijp van de airco. Omdat hij niet meer aan staat, doet het bijzonder weinig. Je ziet geen duidelijke manier om de installatie weer in te schakelen."
                    Break
                }
            } #End rookpatroon
            "Zet de airco uit met de grote rode noodknop." = {
                $Global:ActionMessage = "Je druk op de noodknop en je hoort dat de airo uitschakelt."
                $State.room.'060704'.aircoaan = $false
                Break
            } #End uitzetten
            "Laat de airco met rust en ga verder met je opdracht." = {
                $Global:ActionMessage = "Je laat de airo voor wat het is en gaat weer verder met waar je voor gekomen bent: de beveiliging toetsen."
                Break
            } #End met rust laten
        } #End menu
    ) #End param
        
    #-------------------------
    #region Menu logic
    #-------------------------
    $ValidChoice = $false
    #Loop through the following until $ValidChoice is false
    while(-not $validChoice){
        #Build default screen components
        Clear-Host
        Show-Header
        Write-Host ""
        Write-Host $ActionMessage -ForegroundColor Green #Write the latest action to screen
        Write-Host ""

        #Fill variable with the entire first level of the menu hashtable.
        $keuzekeys = @($menu.Keys)
        $i = 1

        #Loop through all the menu options and write them to screen in a numbered list.
        foreach($key in $keuzekeys){
            Write-Host "${i}: $key"
            $i++
        }
        
        #Ask user for input (a number from the list)
        Write-Host ""
        $keuze = read-host "Selecteer optienummer"

        #Check the following and if it doesn't match, to go catch
        try{
            #Set selected item to the number imputted minus one (because a hashtable starts at 0)
            $keuzekey = $keuzekeys[$keuze-1]
            
            #Select item from menu, corresponding to the user input
            $GekozenActie = $menu.$keuzekey
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a hashtable and inputs that as new options for the next menu level
            if($GekozenActie -is [hashtable]){
                Invoke-OGDDialog-Airco -menu $gekozenactie -MainMenu $false
            }
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a scriptblock and executes it.
            if($gekozenactie -is [scriptblock]){
                Invoke-Command -ScriptBlock $gekozenactie -NoNewScope
            }
        
            $ValidChoice = $true
        
        }catch{
         #If the option selected is neither leading to the next menu, nor a scriptblock, write error and go back in the try loop
         Write-Host 'Ongeldig commando, probeer het nog eens.'
         Start-Sleep -Seconds 1
        }
    } #End while loop
#endregion

} #End Invoke-OGDDialog-General