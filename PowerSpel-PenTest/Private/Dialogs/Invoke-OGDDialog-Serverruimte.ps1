#While renaming to use for specific dialogs, don't forget to rename the call to itself on line ~59
function Invoke-OGDDialog-Serverruimte {
    param(
        #Create a marker to show this is the main menu (otherwise the added sub menu will recursively be added in every sub menu)
        $MainMenu = $true,
        #Create the entire menu from nested hashtables
        [hashtable]$menu = @{
            "Trek wat willekeurige netwerkkabels los" = {
                $Global:ActionMessage = "Je trekt een paar netwerkkabels los. De lampjes in de poorten gaan uit, maar verder gebeurt er niets."
#               INSERT GLOBAL EFFECT HERE
                Break
            } #End kabels lostrekken
            "Bekijk de stroomvoorziening" = @{
                "Bekijk de UPS"  = {
                    $global:ActionMessage = "Onderin de racks hangen de noodstroomvoorzieningen. Alle controlelampjes zijn groen en het lijkt te werken."
                    Break
                }
                "Bekijk waar de stroom vandaan komt" = {
                    $global:ActionMessage = "De stroom van de UPS-en komt van onder de systeemvloer. Je lift een tegel op en ziet dat onder deze vloer de kabels in het donker verdwijnen richting een muur."
                    Break
                }
            } #End Getallen
            "Bekijk wat de mogelijkheden tot beveiligingspenetratie zijn." = @{
                "Installeer je hardware netwerktap op één van de kabels in de coreswitch" = {
                    If ($State.self.Penetrations -notcontains "Packet sniffer op coreswitch aangesloten") { #Only do this if $State.self.Penetrations does not contain the accomplishment you try to add
                        $State.self.Penetrations = $State.self.Penetrations += "Packet sniffer op coreswitch aangesloten" #Add the current penetration option to the list of successfull penetrations
                        $state.self.PenetrationsAmount = $($state.self.PenetrationsAmount) + 1 #Add 1 to PenetrationsAmount
                        $state.self.PenetrationScore = $($state.self.PenetrationScore) + 400 #Add the score of this penetration to the PenetrationScore
                    }
                    $global:ActionMessage = "Je sluit je packet sniffer aan tussen een ongelabelde kabel en de coreswitch. Je sluit hem aan op je mobiele access point om draadloos de vergaarde data te kunnen ontvangen."                    
                    Break
                } #End netwerktap
                "Probeer in te loggen op de machine waar het toetsenbord en beeldscherm op zijn aangesloten" = @{
                    "Druk op [ctrl] + [alt] + [del]"  = @{
                        "Er wordt om inloggegevens gevraagd. Deze heb je niet. Laat maar zitten..." = {Break}
                        "Er wordt om inloggegevens gevraagd. Deze heb je niet. Doe een gok!" = @{
                            "'Administrator@ogd.nl' met 'Welkom123'" =        {$global:ActionMessage = "Helaas, 'Invalid credentials'. Zou ook wel té makkelijk zijn."; Break}
                            "'Administrator@ogd.nl' met 'Pa`$`$w0rd'" =       {$global:ActionMessage = "Helaas, 'Invalid credentials'."; Break}
                            "'.\Administrator', zonder wachtwoord" =          {$global:ActionMessage = "Helaas, 'Invalid credentials'."; Break}
                            "'sa_ldap@ogd.nl' met '%lkgg5T45bY_9('" =         {$global:ActionMessage = "Helaas, 'Invalid credentials'. Had je echt verwacht dat wat random karakers intikken zou werken?"; Break}
                            "'info@ogd.nl' met 'Welkom123'" =                 {$global:ActionMessage = "Helaas, 'Invalid credentials'."; Break}
                            "daan.delaparra@ogd.nl' met 'MyTe`$laRulezzz1'" = {$global:ActionMessage = "Helaas, 'Invalid credentials'. Wel een goede poging!"; Break}
                        } #End gokken
                    } #End CtrlAltDel
                } #End inloggen
                "Laat de racks met rust" = {
                    $global:ActionMessage = "Je laat de racks voor wat ze zijn en bedenkt wat je verder nog kunt doen in het pand."
                    Break
                } #End niets doen
            } #End mogelijkheden
        } #End menu
    ) #End param
        
    #-------------------------
    #region Menu logic
    #-------------------------
    $ValidChoice = $false
    #Loop through the following until $ValidChoice is false
    while(-not $validChoice){
        #Build default screen components
        Clear-Host
        Show-Header
        Write-Host ""
        Write-Host $ActionMessage -ForegroundColor Green #Write the latest action to screen
        Write-Host ""

        #Fill variable with the entire first level of the menu hashtable.
        $keuzekeys = @($menu.Keys)
        $i = 1

        #Loop through all themenu options and write them to screen in a numbered list.
        foreach($key in $keuzekeys){
            Write-Host "${i}: $key"
            $i++
        }
        
        #Ask user for input (a number from the list)
        Write-Host ""
        $keuze = read-host "Selecteer optienummer"

        #Check the following and if it doesn't match, to go catch
        try{
            #Set selected item to the number imputted minus one (because a hashtable starts at 0)
            $keuzekey = $keuzekeys[$keuze-1]
            
            #Select item from menu, corresponding to the user input
            $GekozenActie = $menu.$keuzekey
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a hashtable and inputs that as new options for the next menu level
            if($GekozenActie -is [hashtable]){
                Invoke-OGDDialog-Serverruimte -menu $gekozenactie -MainMenu $false
            }
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a scriptblock and executes it.
            if($gekozenactie -is [scriptblock]){
                Invoke-Command -ScriptBlock $gekozenactie -NoNewScope
            }
        
            $ValidChoice = $true
        
        }catch{
         #If the option selected is neither leading to the next menu, nor a scriptblock, write error and go back in the try loop
         Write-Host 'Ongeldig commando, probeer het nog eens.'
         Start-Sleep -Seconds 1
        }
    } #End while loop
#endregion

} #End Invoke-OGDDialog-General