#While renaming to use for specific dialogs, don't forget to rename the call to itself on line ~59
function Invoke-OGDDialog-OpenPC {
    #Create the entire menu from nested hashtables
    [hashtable]$menu = @{
        "Probeer om via het ingelogde account informatie op de PC te achterhalen." = {
            Write-Host "Oeps, dat gaat niet goed..." -ForegroundColor Green
            Start-Sleep -Seconds 3
            $State.self.ending = 4
            $state.location = @(99,99,99)
            Break
        } #End gather info 
        "Pak je Rubber Ducky en plaats hem onopvallend in een USB-poort." = {
            $global:ActionMessage = "Je stopt je Rubber Ducky in een USB-poort en laat de PC verder met rust. Je gaat weer voor de balie staan."
            #Add penetration
            If ($State.self.Penetrations -notcontains "Remote Execution mogelijkheid gerealiseerd op PC") { #Only do this if $State.self.Penetrations does not contain the accomplishment you try to add
                $State.self.Penetrations = $State.self.Penetrations += "Remote Execution mogelijkheid gerealiseerd op PC" #Add the current penetration option to the list of successfull penetrations
                $state.self.PenetrationsAmount = $($state.self.PenetrationsAmount) + 1 #Add 1 to PenetrationsAmount
                $state.self.PenetrationScore = $($state.self.PenetrationScore) + 500 #Add the score of this penetration to the PenetrationScore
            }
            Break
        } #End rubber ducky
        "Gedraag je onopvallend en lees vanuit een ooghoek wat er op het scherm staat."  = {
            $global:ActionMessage = "Op het huidige scherm is niet veel bijzonders te zien, je zult moeten klikken of tikken."
            Break
        } #End onopvallend
    } #End menu
        
    #-------------------------
    #region Menu logic
    #-------------------------
    $ValidChoice = $false
    #Loop through the following until $ValidChoice is false
    while(-not $validChoice){
        #Build default screen components
        Clear-Host
        Show-Header
        Write-Host ""
        Write-Host $ActionMessage -ForegroundColor Green #Write the latest action to screen
        Write-Host ""

        #Fill variable with the entire first level of the menu hashtable.
        $keuzekeys = @($menu.Keys)
        $i = 1

        #Loop through all themenu options and write them to screen in a numbered list.
        foreach($key in $keuzekeys){
            Write-Host "${i}: $key"
            $i++
        }
        
        #Ask user for input (a number from the list)
        [int]$keuze = read-host "`r`nSelecteer optienummer"

        #Check the following and if it doesn't match, to go catch
        try{
            #Set selected item to the number imputted minus one (because a hashtable starts at 0)
            $keuzekey = $keuzekeys[$keuze-1]
            
            #Select item from menu, corresponding to the user input
            $GekozenActie = $menu.$keuzekey
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a hashtable and inputs that as new options for the next menu level
            if($GekozenActie -is [hashtable]){
                Invoke-OGDDialog-General -menu $gekozenactie
            }
            
            #All items in the menu are either hashtables (submenus) or scriptblocks (menu ends with executions). This checks for a scriptblock and executes it.
            if($gekozenactie -is [scriptblock]){
                Invoke-Command -ScriptBlock $gekozenactie -NoNewScope
            }
        
            $ValidChoice = $true
        
        }catch{
         #If the option selected is neither leading to the next menu, nor a scriptblock, write error and go back in the try loop
         Write-Host 'Ongeldig commando, probeer het nog eens.'
         Start-Sleep -Seconds 1
        }
    } #End while loop
#endregion

} #End Invoke-OGDDialog-General