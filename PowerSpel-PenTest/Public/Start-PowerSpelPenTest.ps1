function Start-PowerSpelPentest 
{
  [CmdletBinding(SupportsShouldProcess = $true,
      ConfirmImpact = 'High'
  )]
  [Alias()]
  param(
    #no parameters
  )
  #Setup State
  $InformationPreference = 'Continue'
  $StateValidated = $false
  try
  {
    $State = Get-state
#    if(@($State.location).count -eq 3) ###SAVEGAME OPTION DELETED
#    {
#      $continueCaption = 'Save game found' 
#      $continueQuery   = 'Do you want to continue this game from {0}' -f $State.lastaction
#      $ContinueCurrentSave = $PSCmdlet.ShouldContinue($continueQuery,$continueCaption)
#      if($ContinueCurrentSave){$StateValidated = $true}else
#      {
        $CreateNewSaveCaption = 'Create New Game.' -f $State.lastaction
#        $CreateNewSaveQuery   = 'Creating a new game overwrites the old game, are you sure you want to continue?'
#        $CreateNewSave = $PSCmdlet.ShouldContinue($CreateNewSaveQuery,$CreateNewSaveCaption)
#        if($CreateNewSave)
#        {
#          Initialize-State
#          $StateValidated = $true
#        }
#      }
#    }
#    else
#    {
      Initialize-State
      $StateValidated = $true
#    } ###SAVEGAME OPTION SUSPENDED
    if(-not $StateValidated){Write-Information -MessageData 'No SaveGame Selected' -InformationAction Continue}
  }
  catch{Write-Error -Message "could not initialize SaveGame Data: $_"}

  #run game
    $global:RoomCounter = 1 #Set roomcounter to 1, to be used by functions and count the moves in the game
    $global:ActionMessage = "" #Pepare variable to show actions in the game
    $Rooms00 = @(Get-ChildItem D:\git\powerspell-pentest\PowerSpel-PenTest\Private\Rooms\Floor00 ).Count; #Count the rooms of the first floor
    $Rooms01 = @(Get-ChildItem D:\git\powerspell-pentest\PowerSpel-PenTest\Private\Rooms\Floor01 ).Count; #Count the rooms of the second floor
    $Rooms02 = @(Get-ChildItem D:\git\powerspell-pentest\PowerSpel-PenTest\Private\Rooms\Floor02 ).Count; #Count the rooms of the third floor
    $Rooms03 = @(Get-ChildItem D:\git\powerspell-pentest\PowerSpel-PenTest\Private\Rooms\Floor03 ).Count; #Count the rooms of the fourth floor
    $Rooms04 = @(Get-ChildItem D:\git\powerspell-pentest\PowerSpel-PenTest\Private\Rooms\Floor04 ).Count; #Count the rooms of the fifth floor
    $TotalRooms = $Rooms00 + $Rooms01 + $Rooms02 + $Rooms03 + $Rooms04 #Add the rooms of all floors together
    $AMSSD = ( #Define multiple ActionMessages to be randomly used in the SSD area
        "Je pakt je telefoon uit je zak, kijkt er even op, knikt en loopt door.",
        "Je probeert onopvallend door te lopen.",
        "Zonder dat iemand je verdenkt, loop je verder door de ruimte.",
        "Je knikt vriendelijk naar één van de OGD'ers en loopt verder naar de bureau's verderop.",
        "Je loopt snel door, voordat iemand je in de gaten krijgt.",
        "Met een blik alsof je hier al jaren werkt, begeef je je door de ruimte.",
        "Je zwaait naar een denkbeeldig iemand verderop in de ruimte en loopt die kant op."
    )

  if($StateValidated)
  {
    try
    {
      while($true)
      {
        clear-host
        show-header
        
        $room = Get-Room 
        Invoke-Room -Room $room

        $state = Get-State
        if($state.location[0] -eq 99 -and
           $state.location[1] -eq 99 -and
           $state.location[2] -eq 98) #Cancel location
        {
          Write-Information -MessageData 'Spel afgebroken'
          Break
        }
        if($state.location[0] -eq 99 -and
           $state.location[1] -eq 99 -and
           $state.location[2] -eq 99) #End location
        {
          $TotalRoomsPercentage =  [math]::Round($(10 / $TotalRooms * $($state.Counter.roomvisits))) #Create a rounded score between 1 and 10.
          $ShowOGDEndingSplat = @{ #Create a hashtable to be used to give arguments to the function ShowOGDEnding in a readable format.
            ScoreName1 = "Aantal kamers bezocht:" 
            ScorePercentage1 = "$TotalRoomsPercentage" 
            ScoreValue1 = $state.Counter.roomvisits
            ScoreMaxValue1 = $TotalRooms
            ScoreName2 = "Nader te bepalen score:" 
            ScorePercentage2 = "7" 
            ScoreValue2 = "7"
            ScoreMaxValue2 = "10"
            ScoreName3 = "Nóg een score:" 
            ScorePercentage3 = "4" 
            ScoreValue3 = "4"
            ScoreMaxValue3 = "10"
          }
          Show-OGDEnding @ShowOGDEndingSplat #Show scores on end screen
          Break
        }
        $locatie = $nieuweLocatie
      }
    }
    catch{Write-Error -Message "game ended unexpectedly: $_"}
  }
}
